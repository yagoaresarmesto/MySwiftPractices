import UIKit

//FUNCIONES EN SWIFT

//Sintaxis de una funci√≥n

func myFunction(){
    print("Do something")
}

//Las funciones pueden retornar valores, y si una funci√≥n retorna un valor debemos especificarle el tipo en la firma de la funci√≥n, es decir, vamos a escribir una funci√≥n que haga la suma de dos n√∫meros y retorne el resultado:

func add(a: Int, b: Int)-> Int {
    return a + b
}

//En este caso la firma de la funci√≥n es:
//func add(a: Int, b: Int) -> Int

//Si nuestra funci√≥n tiene una √∫nica l√≠nea de c√≥digo y retorna un valor, podemos omitir la keyword return, es decir, podr√≠amos escribir el siguiente c√≥digo sin tener fallos al compilar:

func add2(a: Int, b: Int)-> Int {
    a + b
}

//Y la llamamos de la siguiente forma

add2(a: 10, b: 2)

//Tipos de una funci√≥n

//Si continuamos con nuestra funci√≥n add, un detalle curioso es que las funciones tienen un tipo. El tipo de una funci√≥n consiste en los tipos de los par√°metros de entrada y el tipo de retorno. En el caso de nuestra funci√≥n add su tipo es (Int, Int) -> Int.

//Los valores que est√°n entre par√©ntesis son los par√°metros de entrada de nuestra funci√≥n, y el tipo seguido de -> es el tipo de retorno.

let math = add(a:b:)

print(math(2,3))

// RESULTADO üëá
// 5

//Vamos a ver m√°s ejemplos, ahora vamos a crear otra funci√≥n para ver su tipo:

func show(message: String, name:String) -> String {
    return message + "" + name + "!"
}

let message = show(message: "Hola", name: "SwiftBeta")

//En este caso la funci√≥n acepta dos par√°metros de tipo String y retorna un tipo String, su tipo es (String, String) -> String.

//Poder almacenar funciones en constantes y variables es muy potente en Swift. Vamos a ver qu√© m√°s podemos hacer con las funciones.


//Tuplas en Swift

//Acabamos de ver que las funciones en Swift pueden retornar valores. Esto es muy √∫til para poder almacenar el valor de retorno en constantes o variables. Adem√°s de retornar un tipo concreto, podemos retornar tuplas. Vamos a ver un ejemplo muy sencillo, a continuaci√≥n creamos una funci√≥n que retorna una tupla:

func getTuple() -> (String, String) {
    let channel = "SwiftBeta"
    let action = "Suscr√≠bete"
    return (channel, action)
}

let (channel, action) = getTuple()

print(channel)
print(action)

// RESULTADO üëá
// SwiftBeta
// Suscr√≠bete

//A veces resulta √∫til poder retornar una tupla con pocos valores, pero cuando la tupla retorna muchos valores quiz√°s es mejor crear una Struct o Class.


//Nombres de Par√°metros en Swift

//Podemos darle hasta 2 nombres:

//El primer nombre se usa desde fuera del scope de la funci√≥n. Es decir, lo usar√° qui√©n llame a la funci√≥n.
//El segundo nombre se usa dentro del scope de la funci√≥n. Es decir, se usa dentro de la implementaci√≥n de la funci√≥n.

func login (withUsername username: String, withPassword password:String) -> Bool {
    if username.count > 10 {
        return true
    } else {
        return false
    }
}

let isLogged = login(withUsername: "SwiftBeta", withPassword: "123456789")

print(isLogged)

//En Swift tambi√©n podemos omitir un nombre en el par√°metro de entrada y pasarle directamente un valor a la funci√≥n, ¬øc√≥mo lo hacemos?

//a√±adiendo _ al primer nombre del par√°metro, vamos a ver un ejemplo muy sencillo:

func validateUser(_ value: String) -> Bool {
    return value.count > 5
}

//Al llamar a esta funci√≥n y pasarle el par√°metro value, lo a√±adimos directamente entre los par√©ntesis de la funci√≥n, como en el siguiente ejemplo:

validateUser("SwiftBeta")

//Antes de finalizar esta secci√≥n, quiero comentarte que podemos tener dos funciones con el mismo nombre en Swift, pero solo funciona si las dos funciones tienen tipos distintos, es decir:

//--> func getTwoValues() -> (String, String)
//--> func getTwoValues(paramOne name: String, paramTwo surname: String) -> (String, String)

//Estas dos funciones tienen el mismo nombre pero su tipo es diferente. Es por eso que podr√≠amos utilizarlas en nuestro Playground y no tendr√≠amos un error de compilaci√≥n.

//Asignar valores por defecto a los par√°metros de una funci√≥n

func createDatabase(name: String, path: String = "/"){
    print(path)
}

//En este caso, hemos creado una funci√≥n que tiene dos par√°metros de entrada, y el segundo tiene un valor por defecto ¬øEsto qu√© significa? que podr√≠amos llamar a la funci√≥n de la siguiente manera:

createDatabase(name: "SwiftBeta") //Podemos evitar el segundo par√°metro ya que por defecto lo inicializamos en '/'
createDatabase(name: "Swiftbeta", path: "/users/root") //Aqui sobreescribimos el valor por defecto

//Par√°metros variadic en funciones en Swift

//Usamos los par√°metros Variadic en funciones cuando queremos enviar un n√∫mero ilimitado de valores del mismo tipo. Para especificar que un par√°metro es Variadic lo que hacemos es escribir ‚Ä¶ seguidos del tipo. Vamos a verlo m√°s claro en el siguiente ejemplo:

func validate(names: String...){
    print("Names \(names)")
}

validate(names: "SwiftBeta", "Hola", "Patimicola")

//En este caso podemos pasar como par√°metro todas las String que queramos separando cada valor con una coma.

//Los par√°metros Variadic se pueden sustituir por un Array. En el anterior ejemplo podr√≠amos enviar un Array de String y lo √∫nico que variar√≠a es la sintaxis que hemos utilizado, es decir el siguiente c√≥digo hace exactamente lo mismo que usando par√°metros Variadic:

func validate(names: [String]) {
    print("Names \(names)")
}

validate(names: ["SwiftBeta", "Suscribete al Canal", "Youtube"])

//Par√°metros In-Out en Swift

//Los par√°metros de entrada de una funci√≥n son inmutables dentro del scope de una funci√≥n. Al intentar modificar el valor de un par√°metro dentro de la funci√≥n obtenemos un error, vamos a verlo con el siguiente ejemplo:

func validateNames(names: [String]){
    var names = ["SwiftBeta", "SwiftUI", "Swift"]
    print("Names \(names)")
}

//--> validateNames(names: ["UIKit"])

// RESULTADO üëá:
// Error: Cannot assign to value: 'names' is a 'let' constant


//Para poder modificar el valor de un par√°metro de entrada dentro del scope de la funci√≥n, necesitamos:

//Escribir inout entre el nombre y el tipo del par√°metro de entrada de la funci√≥n.
//Al llamar a la funci√≥n debemos usar & al pasar el par√°metro de entrada.

print("----")
func validate(names: inout [String]) {
      names = ["SwiftBeta", "SwiftUI", "Swift"]
      print("Names \(names)")
}
var arrayOfNames = ["UIKit"]
validate(names: &arrayOfNames)

//En el anterior ejemplo hemos a√±adido la keyword inout para especificar que dentro del m√©todo podemos modificar el par√°metro de entrada names. Y al llamar a la funci√≥n, cuando le pasamos el par√°metro arrayOfNames le a√±adimos la & justo delante.

//El valor inicial de arrayOfNames era ["UIKit"] pero hemos modificado su valor dentro de la funci√≥n por ["SwiftBeta", "SwiftUI", "Swift"].
