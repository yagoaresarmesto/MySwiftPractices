import UIKit

//Los clousures en swift son bloques de funcionalidad que realizan una tarea, son parecidos a las funciones. Es con una funci칩n sin nombre donde tenemos un scope y dentro de ese scope ejecutamos nuestro c칩digo

//Sintaxis

let myClousure = { (parameter: Int) -> Int in
    print("Value \(parameter)")
    return parameter
}

//Los closures tienen un estilo particular, son limpios y claros, con optimizaciones que fomentan una sintaxis breve y ordenada.

//Una vez lo hemos asignado, vamos a llamar a nuestro closure y le vamos a pasar como par치metro de entrada un Int:

myClousure(2)

//Al inicio del cap칤tulo te comentaba que un closure es muy parecido a usar una funci칩n, es decir, podr칤amos sustituir el closure anterior por la siguiente funci칩n:

func myClousure(parameter: Int) -> Int {
    print("Value \(parameter)")
    return parameter
}

//Optimizaci칩n en Closures

//Ahora vamos a ver otro ejemplo de un closure. En este caso vamos a crear un closure que no acepta ning칰n par치metro de entrada ni retorna ning칰n valor:

let myEmptyClosure = { () -> Void in
    print("Hola Yago")
}

//Void es un tipo especial en Swift, dentro de este contexto significa que no se retorna ning칰n valor. Y en este caso al no retornar ning칰n valor podemos eliminar la keyword Void y simplificar nuestro c칩digo, es decir:

let myEmptyClousure = { () in
    print("Hola Yago")
}

//Tampoco tenemos par치metros de entrada, podr칤amos hacer otra optimizaci칩n:

let myEmptyClousure3 = {
    print("Hola Yago")
}

//Ahora si queremos llamar a nuestro closure, no basta con a침adir en el Playground myEmptyClosure

myEmptyClousure3()

//Ejemplo pr치ctico sorted(by:)

//Vamos a ver otro ejemplo de c칩mo optimizar nuestro closure, en este caso vamos a usar el m칠todo sorted(by:) que podemos usar para ordenar un Array.

//El m칠todo sorted(by:) acepta una closure que espera dos par치metros del mismo tipo y retorna un Bool. El booleano ser치 true si el primer valor debe aparecer antes que el segundo valor, y ser치 false en caso contrario.))

//Veamos un ejemplo

var frameworks = ["SwiftUI", "Combine", "UIKit", "Foundation"]

frameworks.sorted { (firstValue, secondValue)-> Bool in
    return firstValue < secondValue //--> Podr칤amos quitar el return ya que s칩lo es 1 l칤nea
}

//Al usar sorted(by:) hemos rellenado el closure con la l칩gica que queremos usar para ordenar nuestro Array. En este caso lo hemos ordenado alfab칠ticamente (es decir, se ordena el Array de la A a la Z).

//Para simplificar los par치metros de entrada que entran a nuestro closure podemos usar $0, $1, $2, etc. En este caso $0 representa el par치metro que antes llam치bamos firstValue, y $1 representar el par치metro que antes llam치bamos secondValue.

frameworks.sorted { $0 < $1 }

//춰Incluso podemos simplificarlo a칰n m치s! Podemos pasarle el comparador < directamente a la funci칩n:

frameworks.sorted(by: <)


//Sustituir Closures por funciones

//En ocasiones la l칩gica que se a침ade a un closure puede extraerse en un m칠todo. De esta manera evitamos crear la misma l칩gica dentro del closure y duplicar c칩digo en varias partes de nuestra aplicaci칩n.

//Para reusar c칩digo podemos pasar una funci칩n al closure que tenga la misma firma. Es decir, siguiendo con el ejemplo anterior, podemos crear una funci칩n que nos ordene 2 String y retorne un Bool.

func sort (_ stringOne: String, _ stringTwo: String) -> Bool {
    stringOne < stringTwo
}

//La funci칩n sort tiene la misma l칩gica que us치bamos dentro del closure de sorted(by:):

var frameworks2 = ["SwiftUI", "Combine", "UIKit", "Foundation"]

frameworks2.sorted { (firstValue, secondValue) -> Bool in
    return firstValue < secondValue
}

//En este caso podemos sustituir la l칩gica que tenemos en el closure y pasar como par치metros la funci칩n, es decir podr칤amos hacer el siguiente cambio:

var frameworksSorted = frameworks2.sorted(by: sort)

// RESULTADO 游녢
// ["Combine", "Foundation", "SwiftUI", "UIKit"]
