import UIKit

//M√âTODOS EN SWIFT
//Los m√©todos en Swift son exactamente igual que las funciones. La √∫nica diferencia es que los m√©todos est√°n asociados a un tipo, es decir, los creamos dentro de un tipo (dentro de una Class o Struct).

//M√©todos de Instancia

//Los m√©todos de instancia son m√©todos que creamos dentro de un tipo, por ejemplo dentro de una Struct o Class.

class Game {
    var score = 0
    
    func increaseScore() {
        score += 1
    }
    
    func reset(){
        score = 0
    }
}

//En el anterior ejemplo hemos creado una Class con 2 m√©todos. Estos 2 m√©todos son m√©todos de instancia, por lo tanto primero tenemos que crear una instancia de Game para poder acceder a sus m√©todos.

let game = Game()
game.increaseScore()
game.increaseScore()

print(game.score)

//Al crear la instancia de nuestra Class Game, hemos podido llamar a sus m√©todos. En este caso hemos llamado al m√©todo increaseScore que se encarga de incrementar el valor de la propiedad score.

// Modificar value types con M√©todos de Instancia

//Anteriormente no entramos en detalle en que las propiedades de una Struct (value types) no pueden modificarse dentro de los m√©todos de su instancia, ¬øesto qu√© significa? vamos a intentar modificar el valor de una propiedad de una Struct dentro de un m√©todo:

//Al crear la Struct User obtendremos el siguiente error
/*
struct User {
    var name = String
    
    func update(name: String) {
        self.name = name
    }
    
}
*/

// RESULTADO üëá
// Error: Cannot assign to property: 'self' is immutable


//Para poder modificar el valor de la propiedad name desde el m√©todo de la Struct, tenemos que a√±adir la keyword mutating al inicio del m√©todo, es decir:

struct User {
    var name: String
    mutating func update(name: String) {
        self.name = name
    }
}

//Al a√±adir mutating el error de compilaci√≥n desaparece y podemos modificar el valor de la propiedad name. Vamos a crear una instancia de User y vamos a llamar al m√©todo update(name: String) para ver que funciona perfectamente:

var user = User(name: "Yago Ares")
user.update(name: "Jes√∫s Ares")
print(user.name)

//¬øQu√© es self?

//¬øqu√© es self y por qu√© la usamos? Al crear una instancia de un tipo podemos acceder a la propiedad impl√≠cita llamada self. Usamos esta propiedad self para referirnos a la instancia actual y as√≠ poder llamar a las propiedades y m√©todos que tenemos dentro del tipo.

//Por ejemplo, la clase Game que hemos visto en la secci√≥n anterior, podr√≠amos usar self para llamar a las propiedades y sus m√©todo

class Game1 {
    var score = 0
    
    func increaseScore(){
        self.score += 1
        self.printScore()
    }
    
    func reset(){
        self.score = 0
    }
    
    func printScore(){
        print("Score Incremented! \(score)")
    }
}

//En este caso, dentro del m√©todo increaseScore podemos acceder a la propiedad score y tambi√©n al m√©todo increaseScore usando self. Al a√±adir self Swift asume que nos estamos refiriendo a alg√∫n m√©todo o propiedad del tipo Game. En este caso, podr√≠amos omitir el uso de self y nuestro c√≥digo compilar√≠a sin problemas.


//Vamos a ver un ejemplo que puede aclarar el uso de self. Ahora imagina que tenemos dos tipos llamados Chat y Logger, y los dos tienen el mismo m√©todo printMessage:

class Chat {
    var logger = Logger()
    
    func messageReceived(){
        self.printMessage()
        logger.printMessage()
    }
    
    func printMessage() {
        print("[CHAT] Message Received")
    }
}



class Logger {
    func printMessage(){
        print("[LOGGER] Message received")
    }
}

let chat = Chat()
chat.messageReceived()

//Hay dos clases, una llamada Logger y la otra Chat. Dentro de Chat tenemos una propiedad de tipo Logger. Lo que quiero destacar es que dentro del m√©todo messageReceived, estamos llamando al m√©todo printMessage del tipo Chat y del tipo Logger. Para llamar al m√©todo que tenemos dentro de Chat usamos self mientras que en el de la instancia de Logger usamos logger.

//Hay developers que prefieren usar self y hay otros que lo omiten siempre que pueden. En mi caso soy de los segundos, ya que en muchas ocasiones a√±adir self es redundante.

//M√©todos de tipo en Swift

//Los m√©todos de tipo son m√©todos que podemos llamar directamente desde nuestra Class o Struct sin crear la instancia de nuestro tipo. Para diferenciar un m√©todo de instancia de un m√©todo de tipo, usamos la keyword static.

class Car {
    var passengers = 0
    
    static func startEngine() {
        print("Start engine")
    }
    
    func addPassenger(){
        passengers += 1
    }
    
    func stopEngine(){
        passengers = 0
    }
}

//Para usar el m√©todo de tipo startEngine() podemos llamar a la funci√≥n directamente desde el tipo (y no de la instancia), es decir:

Car.startEngine()
