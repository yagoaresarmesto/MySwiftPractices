import UIKit

//COLECCIONES EN SWIFT: ARRAY, SET y DICTIONARY

//Colecciones en Swift

//Con las colecciones podemos asignar varios valores de un mismo tipo a una variable o constante, a continuaci칩n vamos a ver un ejemplo de colecci칩n, para este caso vamos a crear un Array en Swift:

var mySkills = ["Swift", "SwiftUI", "Objective-C", "UIKit"]

//La variable mySkills es una colecci칩n ya que est치 almacenando varios valores de String

//Array
//Array, los utilizamos para guardar una colecci칩n de valores ordenados.

//Por Ejemplo, podemos crear un Array de tipo Int que almacene los siguientes valores 1,2,3,1,2,3. Otro ejemplo, podemos crear un Array con valores "Swift", "SwiftUI", "Xcode" en este caso el tipo del Array ser칤a String.

//Set
//Set, los usamos para guardar una colecci칩n de valores 칰nicos y desordenados. Es decir, un Set no puede contener valores duplicados.

//Por ejemplo, podemos crear un Set que almacene Int de la siguiente manera 1, 2, 3, 4 . Si intentamos a침adir otro 2 no se a침adir칤a al Set.

//Dictionary
//Dictionary, los usamos para guardar una colecci칩n pero en este caso usamos clave-valor.
//Los Dictionary no tienen orden (al igual que los Set), por ejemplo, para crear un Dictionary podemos crearlo de la siguiente manera ["name": "SwiftBeta", "app": Xcode] y en este caso el tipo de nuestro Dictionary ser칤a String: String.
//En un Dictionary siempre va la clave primero y a continuaci칩n, seguido de : a침adimos el valor que hace referencia a la clave.



//Colecciones que no tienen orden

//Por ejemplo recorremos un array con un forEach y los mostramos con un print


var arrayOfNames = ["Swift", "SwiftUI", "Objective - C", "Combine"]

print("/Array/")
arrayOfNames.forEach{print($0)}

// RESULTADO 游녢:
// Swift
// SwiftUI
// Objective-C
// Combine

//Siempre mostrar치 el mismo orden

//Ahora haremos lo mismo con un set

print("/Set/")
var setOfNames: Set <String> = [
    "Swift", "SwiftUI", "Objective - C", "Combine"
]
setOfNames.forEach{print($0)}

//No tiene porque devolver el mismo orden siempre

//Ahora vamos a ver el orden en un Dictionary

var dictionaryOfNames = [
    1: "Swift",
    2: "SwiftUI",
    3: "Objective - C",
    4: "Combine"
]
print("/Dictionary/")
dictionaryOfNames.forEach{ print($0.value)}

//Si compilamos varias veces, vemos que el orden var칤a. Exactamente el mismo caso que con la colecci칩n Set.


//Igual que vimos en el cap칤tulo de las constantes y variables, cuando creamos una colecci칩n debemos especificar el tipo que pueden almacenar. Si tengo una Array de tipo String, ese Array solo puede almacenar tipos String. El siguiente ejemplo muestra una variable llamada arrayOfStrings que almacena una colecci칩n de String:
print("_________________________________")
var arrayOfStrings: [String] = ["SwiftBeta", "SwiftUI", "Swift", "Xcode"]

arrayOfStrings.append("Objective - C")
arrayOfStrings.forEach {print($0)}

//Si ahora intentamos asignar a nuestro Array otro tipo que no sea String, el compilador nos devolver치 un error. Es decir, si intentamos a침adir un Int a una colecci칩n de String, obtenemos el siguiente error

//--> arrayOfStrings.append(1)

// RESULTADO 游녢
// Error: cannot convert value of type 'Int' to expected argument type 'String'



// Colecciones Inmutables en Swift))

//Justo en el ejemplo anterior hemos aprendido a modificar una variable de tipo String pero tambi칠n podemos almacenar colecciones en constantes.

//Si sabemos que las colecciones no van a cambiar a lo largo del ciclo de ejecuci칩n de nuestra aplicaci칩n, una buena pr치ctica es crearlas inmutables. De esta manera tenemos menos probabilidades de introducir bugs (errores) en nuestro c칩digo. Tambi칠n ayuda al compilador a optimizar la performance de las colecciones que creamos.

//Si intentamos modificar una colecci칩n asignada a una constante, el compilador nos retorna un error:

let arrayOfStrings2: [String] = ["SwiftBeta", "SwiftUI", "SwfitUI", "Swift", "Xcode"]
//arrayOfStrings2.appent("Obejetive - C")
//arrayOfStrings2.forEach {print($0)} ---> salta error

// error: cannot use mutating member on immutable value: 'arrayOfStrings' is a 'let' constant


//Array

//Para inicializar un Array sin ning칰n elemento, podemos hacerlo de varias maneras:

var numbers = [Int]()
var numbers2: [Int] = [] //Esta es la m치s com칰n
var numbers3: [Int] = .init()
var numbers4: Array<Int> = []

//Pero aparte de inicializarlo podemos asignarle un valor directamente. Vamos a ver varias maneras:

var strings = Array(["Swift", "Xcode", "SwiftUI"])
var string2 = ["Swift", "Xcode", "SwiftUI"]

//En Swift tenemos propiedades y m칠todos que podemos usar con los Array. Por ejemplo, para saber cu치ntos elementos tiene un Array podemos usar la propiedad count, pero hay muchas propiedades y m칠todos que podemos usar. Vamos a ver algunos ejemplos:

//Count

//Tenemos el siguiente array

var myNewSkills = ["Combine", "TDD", "SnpapshotTests", "Swift Package Manager"]

print(mySkills.count) //N칰mero de elementos de un array en este caso 4

//isEmpty

print(myNewSkills.isEmpty)// Devuelve true o false, en este caso false

//Este tipo de condici칩n es muy 칰til usarla en un if, de esta manera podemos tomar decisiones dentro de nuestro c칩digo y ejecutar una l칩gica u otra:

if myNewSkills.isEmpty {
    print("El array est치 vac칤o")
}else {
    print("El array no est치 vac칤o")
}

//FIRST, LAST

//Podemos obtener el primer y 칰ltimo valor de un Array usando la propiedad first y last respectivamente:
print(myNewSkills.first)
print(myNewSkills.last) //Devuelven opcionales

//En este caso estamos accediendo a estas propiedades first y last que tienen una posiciones ya definidas: el primer y 칰ltimo elemento. Pero podr칤amos acceder directamente a otras posiciones de nuestro Array, podemos usar los subscripts en Swift.

//Subscripts

//Los subscripts son otra forma de acceder a los elementos de una colecci칩n, son atajos para actualizar o obtener su valor. Lo 칰nico que tenemos que hacer es poner el nombre de nuestro Array seguido de [] y dentro de los corchetes a침adir la posici칩n que queremos extraer de nuestro Array. Vamos a ver un ejemplo:

print(myNewSkills[2])
print(myNewSkills[3])

//Append

//Ahora vamos a utilizar dos maneras diferentes para a침adir valores dentro de nuestro Array myNewSkills

myNewSkills.append("Tests")
myNewSkills += ["UITableView", "UICollectionView"]

print(myNewSkills)

//INSERT

//Otra manera de a침adir valores dentro de nuestro Array es usando el m칠todo insert. Este m칠todo acepta 2 par치metros, el primer par치metro es el valor que queremos insertar en nuestro Array, y el segundo par치metro es la posici칩n donde queremos a침adirlo:

myNewSkills.insert("SwiftBeta", at: 2)
print(myNewSkills)

//CONTAINS
// Usamos el m칠todo contains para saber si un elemento est치 dentro de nuestro Array:

let containsCombine = myNewSkills.contains(where: { $0 == "Combine"} )
print(containsCombine)

// RESULTADO 游녢
// true

//REMOVEALL
//Usamos removeAll cuando queremos borrar todos los elementos de nuestro Array. Es decir, si queremos borrar todos los elementos de nuestra colecci칩n myNewSkills har칤amos lo siguiente:

myNewSkills.removeAll()
print(myNewSkills)

//Set

//Inicializar un set:

var setNumbers = Set<Int>()
var setNumbers2: Set<Int> = [] //Me quedo con esta
var setNumbers3: Set<Int> = .init()

//Acabamos de ver c칩mo crear un Set completamente vac칤o. Pero aparte de inicializarlo podemos asignarle un valor directamente. Vamos a ver varias maneras:

var myDevices = Set(["Monitor", "Keyboard", "Laptop", "Mobile"])
var myDevices2: Set<String> = ["Monitor", "Keyboard", "Laptop", "Mobile"]
var myDevices3 = Set.init(["Monitor", "Keyboard", "Laptop", "Mobile"])

//Si intentaremos inicializar un Set con valores repetidos, todos los valores duplicados se descartar칤an autom치ticamente:

var myDevices4 = Set(["Monitor", "Monitor", "Keyboard", "Laptop", "Mobile"])
print(myDevices4)

// RESULTADO 游녢
// ["Monitor", "Keyboard", "Laptop", "Mobile"]

//Acceder y Modificar un Set
//COUNT

var mySetNumbers : Set<Int> = [1, 2, 3, 4, 5]
print(setNumbers.count)

//ISEMPTY

//Otra propiedad que podemos usar para saber si un Set esta vac칤o es la propiedad isEmpty, vamos a ver un ejemplo:

if mySetNumbers.isEmpty {
    print("Esta vac칤o")
} else {
    print("No est치 vac칤o")
}

// RESULTADO 游녢
// mySetNumbers isn't Empty

//
print(mySetNumbers.count)

// RESULTADO 游녢

// FIRST
print(mySetNumbers.first)

//Como hemos dicho, los Set no tienen orden, aunque estemos pidiendo la posici칩n first el valor que nos va a retornar siempre va a ser diferente.

//INSERT

mySetNumbers.insert(6)
mySetNumbers.insert(8)
print(mySetNumbers)

//CONTAINS

var containsNumberSix = mySetNumbers.contains(where: { $0 == 6 } )
print(containsNumberSix)

// RESULTADO 游녢
// true

//REMOVEALL
mySetNumbers.removeAll()
print(mySetNumbers)

// RESULTADO 游녢
// []


//Realmente todas estas propiedades tanto en los arrays como en los y Set son muy similares. Pero tienen alguna diferencia

//- En Set no existe el m칠todo append
//- En Set podemos usar el m칠todo insert pero sin especificar una posici칩n (en el tipo Array podemos indicar la posici칩n).
//- En Set no existe la propiedad last

//Dictionary

//Los Dictionary almacenan asociaciones entre claves del mismo tipo y valores del mismo tipo. Cada valor est치 asociado a una 칰nica clave. En este caso, al igual que los Set tampoco tenemos un orden.

var myDictionary = [String: String]()
var myDictionary2: [String: String] = .init()
var myDictionary3: [String: String] = [:]


//Podr칤amos crear un Dictionary especificando que su clave es de tipo Int y su valor de tipo Bool:

var anotherDictionary = [Int: Bool]()

//Inicializar un Dictionary con un valor:

var myDictionaryInfo = [
    "name": "SwiftBeta",
    "webpage": "swiftbeta.com",
    "skills": "Swift"
]
var myDictionaryInfo2 = Dictionary(dictionaryLiteral: ("name", "SwiftBeta"), ("webpage", "swiftbeta.com"), ("skills", "Swift"))

//Acceder y Modificar un Dictionary

//COUNT
print(myDictionaryInfo.count)

//ISEMPTY
if myDictionaryInfo.isEmpty {
    print("myDictionaryInfo isEmpty")
} else {
    print("myDictionaryInfo isn't Empty")
}

//UPDATEVALUE

myDictionaryInfo.updateValue("@SwiftBeta:", forKey: "twitter")

print(myDictionaryInfo)

//Este m칠todo lo podemos usar tambi칠n para modificar el valor de una clave que ya existe en nuestro Dictionary, vamos a modificar el actual valor de la clave webpage que es swiftbeta.com por el valor google.com:

myDictionaryInfo.updateValue("google.com", forKey: "webpage")
print(myDictionaryInfo)

//Otra manera de a침adir un valor a un Dictionary, es usando los subscripts (tal y como hemos visto en la secci칩n de los Array). A continuaci칩n vamos a a침adir una nueva clave con su respectivo valor:

myDictionaryInfo["city"] = "Lugo"
print(myDictionaryInfo)

//REMOVEVALUE

myDictionaryInfo.removeValue(forKey: "twitter")
print(myDictionaryInfo)

//Tambi칠n podr칤amos haber usado los subscripts para asignar nil a una clave y por lo tanto eliminarla del Dictionary.

myDictionaryInfo["twitter"] = nil
