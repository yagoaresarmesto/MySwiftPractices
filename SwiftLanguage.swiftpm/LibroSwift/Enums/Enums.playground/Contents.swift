import UIKit

//A lo largo del libro hemos visto que podemos crear tipos en Swift a partir de Class y Struct pero no es la √∫nica manera, tambi√©n podemos crear tipos con Enum.

//Los Enum definen un tipo com√∫n para un grupo de valores relacionados y permite trabajar con estos valores de una manera segura dentro de tu c√≥digo.

// Sintaxis de un Enum

//podemos definir diferentes estados que queremos usar dentro de nuestro nuevo tipo. Estos diferentes valores los a√±adimos como cases dentro del Enum.

enum MessageStatus {
    case sent
    case received
    case read
}

//Instancia de un Enum

let messageStatus = MessageStatus.sent

//Otra manera de crear una instancia de un Enum es la siguiente:

let botStatus: MessageStatus = .received

//Al crear una instancia de una Class o Struct us√°bamos su inicializador, pero en este caso no hemos necesitado crear ning√∫n inicializador en nuestro Enum. Directamente podemos asignar el case de un Enum a una constante o variable.

//Pero, ¬øpodemos crear inicializadores dentro de un Enum? La respuesta es que s√≠, podemos crear un inicializador y dentro de √©l asignar un valor inicial de nuestro Enum, vamos a crear un inicializador de nuestro Enum MessageStatus:

enum MessageStatus2 {
    case sent
    case received
    case read
    
    init(isMessageSent: Bool){
        if isMessageSent {
            self = .sent
        }
        self =  .received
    }
}


let status = MessageStatus2(isMessageSent: true)
print(status)

//Matching de un Enum con un Switch

//Al usar Enum es muy com√∫n usar switch, de esta manera podemos separar la l√≥gica que queremos implementar seg√∫n el valor del Enum, es decir, vamos a usar el mismo Enum que hemos creado en la secci√≥n anterior llamado MessageStatus y vamos a realizar una l√≥gica diferente por cada case.

let messageStatus3 = MessageStatus.sent

switch messageStatus {
case .sent:
    print("Message sent")
case .received:
    print("Message Received")
case .read:
    print("Message Read")
}

// RESULTADO üëá
// Message Sent

//En ocasiones, podemos agrupar cases para que realicen una misma acci√≥n, es decir, podr√≠amos agrupar el case de received y read en uno:

switch messageStatus {
case .sent:
    print("Message sent")
case .received, .read:
    print("Message Received or Read")
}

//Tambi√©n podemos usar la keyword break para indicar que al entrar dentro de un case no queremos ejecutar ning√∫n tipo de l√≥gica. Es decir, vamos a modificar el case del sent y vamos a sustituir el print por un break:

switch messageStatus {
case .sent:
    break
case .received, .read:
    print("Message Received or Read")
}

//En esta ocasi√≥n no estamos realizando ning√∫n tipo de l√≥gica dentro del case sent. Se ejecuta el case sent pero al ejecutar el break salimos de su scope continuando as√≠ con la ejecuci√≥n de nuestro c√≥digo.

//Ahora vamos a ver un ejemplo pr√°ctico de c√≥mo podemos ejecutar c√≥digo si nuestro Enum messageStatus tiene el valor de sent usando un if:

if messageStatus == .sent {
    print("Message sent (If Statement)")
}

// RESULTADO üëá
// Message Sent (If Statement)

//Este caso es menos restrictivo, ya que no a√±adimos todos los posibles valores de nuestro Enum. Esta flexibilidad puede estar bien, pero hay que tener en cuenta esta limitaci√≥n al usar if ya que podr√≠amos olvidarnos de a√±adir l√≥gica dentro de nuestra aplicaci√≥n.
//Al usar un switch podemos forzar la implementaci√≥n por cada case de nuestro Enum.

//Enums y default case

//En la secci√≥n anterior hemos mostrado que al usar un switch tenemos que a√±adir todos los cases de nuestro Enum pero esto no es del todo cierto. Podemos usar un case que es el de por defecto llamado default,
//dentro de este case se ejecuta la l√≥gica de los cases que no hemos a√±adido dentro de nuestro Enum, es decir, podr√≠amos hacer lo siguiente:


enum MessageStatus3 {
    case sent
    case received
    case read
}

let messageStatus4 = MessageStatus.sent

switch messageStatus4 {
case .received:
    print("Messge Received")
default:
    print("Other value")
}

//Al compilar este c√≥digo en nuestro Playground, ¬øqu√© crees que se va a mostrar por consola? El resultado que aparece es Other Value ya que dentro de nuestro switch se ha ejecutado el c√≥digo de default. Usar default es √∫til si no queremos controlar todos los cases de nuestro Enum.

//M√©todos y propiedades dentro de un Enum

//Al crear un Enum podemos crear m√©todos de instancia, m√©todos de tipo y propiedades computadas.

//Ahora vamos a crear un Enum y dentro de √©l vamos a crear una propiedad computada, y un m√©todo de instancia y tipo:


enum CompassPoint {
    case north
    case south
    case east
    case west
    
    
    //De propiedad
    var owner: String {"Yago Ares"}
    
    //M√©todo de instancia
    func printValue() -> String {
        return "Value: M√©todo de instancia"
    }
    
    //M√©todo de tipo
    static func printMessage() -> String {
        return "Message: M√©todo de tipo"
    }
}

let compassPoint: CompassPoint = .north
compassPoint.owner
compassPoint.printValue()

// RESULTADO üëá
// SwiftBeta
// Value: M√©todo de Instancia

//Tmabien podemos llamar al m√©todo de tipo que para este no creamos instancia

CompassPoint.printMessage()

// RESULTADO üëá
// Message: M√©todo de tipo

//Un Enum es una manera diferente de crear tipos. Es importante entender bien la diferencias para saber cu√°ndo escoger un Enum, Class o Struct.

//Vamos a seguir aprendiendo sobre los Enum, un concepto importante es que son value type como las Struct.


//Enums son Value Types

//Hablamos de Class y Struct, explicamos en detalle las diferencias entre reference type y value type. Vamos a volver a explicar qu√© significa que un tipo sea Value Type, pero esta vez usando un Enum como ejemplo.

//Una vez tenemos el Enum vamos a crear una instancia:

enum Move {
    case top
    case right
    case bottom
    case left
}

// creamos un instancia:

var firstMove = Move.top

// Y otras 2 y le asignamos el valor de firstMove

var secondMove = firstMove
var thirdMode = firstMove

// RESULTADO üëá:
// top
// top
// top

//Si ahora cambiamos el valor de la varible secondMove, vamos a ver que ocurre

secondMove = .right

print(firstMove)
print(secondMove)
print(thirdMode)

//Al asignar un nuevo valor a la variable secondMove, el cambio solo afecta a esa variable. Esto ocurre porque cuando hemos asignado el valor de firstMove a la variable secondMove se ha creado una copia. Y por lo tanto un cambio en una de las variables no afecta a las dem√°s.

//Las Class son reference type, y las Struct y Enum son value type. Es importante conocer bien c√≥mo funcionan y saber sus pros y contras, ya que depende del contexto te decantaras por crear una u otra.

//Iterar sobre todos los cases de un Enum

//En Swift 5.2 lanzaron un protocolo para poder extender la funcionalidad de los Enum. En el cap√≠tulo 13 explicaremos en detalle los protocolos, pero para que te hagas un idea, un protocolo a√±ade una funcionalidad extra a un tipo.

//Podemos conformar protocolos en los tipos que creamos en Swift, en el siguiente ejemplo vamos a crear un Enum y vamos a conformar el protocolo CaseIterable. Este protocolo nos a√±ade una funcionalidad extra en los Enum para poder iterar por todos sus cases, y esta funcionalidad forma parte de la Librer√≠a Standard de Swift, es un protocolo ya creado por Apple que podemos usar libremente en nuestros Enum, puedes ver m√°s informaci√≥n en la documentaci√≥n de Apple.

//Imagina que tenemos el siguiente Enum:

enum Week {
    case monday
    case tuesday
    case wednesday
    case thursday
    case friday
    case saturday
    case sunday
}

//Podemos conformar el protocolo CaseIterable y as√≠ extender la funcionalidad del Enum. Para conformar un protocolo debemos a√±adir : despu√©s del nombre de nuestro tipo y a continuaci√≥n a√±adir el nombre del protocolo:

enum Week2: CaseIterable {
    case monday
    case tuesday
    case wednesday
    case thursday
    case friday
    case saturday
    case sunday
}

//Al a√±adir el protocolo CaseIterable, autom√°ticamente ya hemos vitaminado nuestro Enum con nueva funcionalidad, podemos acceder a la propiedad allCases para iterar y mostrar todos los cases de nuestro Enum de la siguiente manera:

Week2.allCases.forEach{ print ($0)}

// RESULTADO üëá
/*
 monday
 tuesday
 wednesday
 thursday
 friday
 saturday
 */

let numberofDays = Week2.allCases.count
print("Week days \(numberofDays) ")

// RESULTADO üëá
// Week days: 7

//Conformar protocolos tambi√©n lo podemos hacer usando Class y Struct, y lo vamos a ver, esto solo ha sido una peque√±a introducci√≥n.

//Associated Values en Swift

//Al crear un Enum muchas veces nos resultar√° √∫til que los cases tengan par√°metros de entrada, es decir, que puedan recibir un valor. Estos valores se llaman Associated Values, pero, ¬øc√≥mo los podemos usar? Es muy parecido a pasar par√°metros a una funci√≥n, vamos a verlo en detalle.

//A continuaci√≥n vamos a crear un Enum que represente el campo de un formulario y este mismo campo puede representar diferentes formatos: nombre, calle, n√∫mero de tel√©fono y tarjeta de cr√©dito.

enum Field {
    case name(String)
    case street(String)
    case phone(number: String)
    case creditCart(digits: String, cvv: Int)
}

//En este caso hemos creado varios cases en nuestro Enum y cada uno de ellos acepta un associated value.

//Si queremos crear una instancia de este Enum y usar en un switch podemos hacer lo siguiente:


let creditCardField = Field.creditCart(digits: "1234 5678 9102", cvv: 722)

switch creditCardField {
case .creditCart(digits: let digits, cvv: _):
    print("Credit Card: \(digits)")
default:
    print("Do nothing")
}

// RESULTADO üëá
// Credit Card: 1234 5678 9012

//Dentro del case creditCard podemos acceder a los associated values (muy parecido a recibir valores como par√°metros de entrada en una funci√≥n).

//Un detalle importante es que los valores que podemos pasar al case de un Enum pueden tener un nombre. En el caso de phone y creditCard hemos creado nombres para que sea m√°s comprensible nuestro c√≥digo.


//Raw Values en Swift

//En la anterior secci√≥n hemos visto que podemos pasar valores a los cases de un Enum usando associated values, pero en ocasiones podemos simplificarlos y podemos dar un valor directamente al case de nuestro Enum.

//Estos valores por defecto los llamamos raw value y para poder hacerlo todos los cases del Enum deben ser del mismo tipo. En este caso debemos a√±adir el tipo justo a continuaci√≥n del nombre de nuestro Enum, vamos a ver un ejemplo:

enum Parameter: String {
    case query = "El libro de Swift"
    case limit = "50"
    case author = "SwiftBeta"
}

//Ahora para extraer y poder usar el valor de cada case, podemos crear una instancia y acceder al raw value de la siguiente manera:

let parameter = Parameter.query.rawValue
let limit = Parameter.limit.rawValue
let author = Parameter.author.rawValue

print(parameter)
print(limit)
print(author)

//Hemos creado un Enum y en cada case le hemos asignado un valor. En este caso ha sido de tipo String (todos los cases deben tener el mismo tipo).

//Es importante especificar el tipo de los raw value de nuestro Enum, si no lo hacemos obtenemos el siguiente error

/*
 enum Parameter {
 case query = "El Libro de Swift"
 case limit = "50"
 case author = "SwiftBeta"
 }
 */

// RESULTADO üëá
// Error: Enum case cannot have a raw value if the enum does not have a raw type


//Ahora vamos a ver otro Enum pero esta vez tiene como raw value de tipo Int

enum Planet: Int {
    case mercury = 1, venus, earth, mars, jupiter, saturn, uranus, neptune
}

//En el Enum Planet indicamos que mercury tiene el valor de 1 y autom√°ticamente por cada case que va a continuaci√≥n su valor se incrementar√° en 1. Esto significa que venus tendr√° un raw value de 2, earth tendr√° un raw value de 3, etc. pero para asegurarnos vamos comprobarlo con el siguiente c√≥digo:

let mercury = Planet.mercury.rawValue
let earth = Planet.earth.rawValue
let neptune = Planet.neptune.rawValue

// RESULTADO üëá
// 1
// 3
// 8
